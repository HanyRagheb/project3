version: 2.1  

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-<< parameters.Workflow_ID >>

            #aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}  
            #aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5" --recursive    
            #aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -k https://kvdb.io/KYiXNLKq9E6FeQkDqnehVd/migration_${CIRCLE_WORKFLOW_ID:0:5})
            if(( $SUCCESS == 1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            # exit 1
            fi         
jobs:
   build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

   build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
   test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test   
   test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Test Back-end
            command: |
              cd backend
              npm install
              npm run test
   scan-frontend:
      docker:
       - image: circleci/node:13.8.0
      steps:
       - checkout
       - restore_cache:
          keys: [frontend-build]
       - run:
          name: Scan front-end
          command: |
            # exit 0
            # npm audit
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
   scan-backend:
      docker:
       - image: circleci/node:13.8.0
      steps:
       - checkout
       - restore_cache:
          keys: [backend-build]
       - run:
          name: Scan Back-end
          command: |
            exit 0
            npm audit
            # cd backend
            # npm install
            # # npm install oauth-sign@^0.9.0
            # #npm audit fix --audit-level=critical --force
            # npm audit fix --force
            # npm audit --audit-level=critical
   deploy-infrastructure:
      docker:
       - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install Dependencies
            command: |
             yum install -y tar gzip
        - run:
           name: Ensure back-end infrastructure exists
           command: |
             aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=udapeople \
               --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:5}" \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

        - run:
           name: Ensure front-end infrastructure exist
           command: |
             aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
               --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
        - run:
           name: Add back-end ip to ansible inventory
           command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
            - project/.circleci/ansible/inventory.txt 
        - destroy-environment

   configure-infrastructure:
     docker:
       - image: python:3.11.0rc1-alpine3.16
     steps:
      - checkout
      - add_ssh_keys:
         fingerprints: ["0a:a5:87:90:20:79:45:43:b4:2d:21:50:d4:ae:09:48"]
      - attach_workspace:
         at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add ansible gzip openssh-client
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              # aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
              # cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

   run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install            
            npm run migrations > migrations_dump.txt
            #exit 1
      - run:
          name: Send migration status to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then                
            curl -k https://kvdb.io/KYiXNLKq9E6FeQkDqnehVd/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            fi
            #exit 1
      - revert-migrations   
   cloudfront-update:
     docker:
       - image: amazon/aws-cli
     steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum install -y tar gzip      
        - run: 
            name: persist last workflow id before promoting
            command:  |
              # Fetch the Old workflow ID along created stacks
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              touch ~/OldWorkflowID.txt
              echo $OldWorkflowID > ~/OldWorkflowID.txt
              cat ~/OldWorkflowID.txt
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:5}"
        - persist_to_workspace:
            root: ~/
            paths:
              - OldWorkflowID.txt          
        - run:
            name: Update cloudfront distribution
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople      
        - destroy-environment
        - revert-migrations  
   cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id & Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo $OldWorkflowID           
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"            
            if [[ "${CIRCLE_WORKFLOW_ID:0:5}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi              
   deploy-frontend:
    docker:
      - image: python:3.9.15-alpine3.16
    steps:
      - checkout       
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk add --update nodejs
            apk add --update npm
            apk add --update aws-cli
            apk add --update curl
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`BackendPublicIP-${CIRCLE_WORKFLOW_ID:0:5}\`].Value" \
              --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - destroy-environment
      - revert-migrations      
workflows:
  default:
    jobs:
        - build-frontend
      # - build-backend
      # - test-frontend:
      #      requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #      requires: [build-frontend]
      # - deploy-infrastructure:
      #      requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #      filters:
      #        branches:
      #          only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
        - deploy-frontend
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]